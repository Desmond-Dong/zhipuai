blueprint:
  name: AI事件摘要 (智谱AI视觉分析 Plus)
  author: knoop7
  description: >
    基于智谱AI的摄像头事件分析，可以智能分析摄像头画面并生成事件摘要。
    向您的手机发送带预览的通知，当AI分析完成后会动态更新。

    功能特点：
    1. 支持多个摄像头和传感器的配对
    2. 实时分析：传感器触发时立即开始分析
    3. 双重通知：先发送触发提醒，分析完成后更新结果
    4. 智能分析：使用智谱AI的视觉模型分析画面内容
    5. 美观通知：包含实时预览和分析结果
    6. 重要性过滤：可选择只关注重要事件
    7. 历史记录：可选择保存事件记录

    使用说明：
    1. 选择要监控的摄像头
    2. 选择对应的触发传感器（按顺序匹配）
    3. 选择接收通知的设备
    4. 自定义分析要求（可选）
    5. 选择合适的AI模型
    6. 配置其他选项（重要性过滤、历史记录等）

    注意事项：
    1. 传感器和摄像头需要一一对应
    2. 确保设备支持通知功能
    3. 建议使用移动传感器或门窗传感器触发
  domain: automation
  source_url: https://raw.githubusercontent.com/knoop7/zhipuai/refs/heads/v2025.01.09-dev/custom_components/zhipuai/blueprints/ai_event_summary.yaml
  input:
    important:
      name: 重要性过滤
      description: >
        使用AI将事件分类为"关键"、"普通"和"低重要性"。
        仅当事件被分类为至少"普通"时才发送通知。
        对于关键事件，即使在"勿扰模式"下也会发送通知。
        请谨慎使用：AI可能会判断错误。
      default: false
      selector:
        boolean:
    remember:
      name: 记录历史
      description: 保存事件记录，方便您之后查看和回顾。如果开启了智能过滤，只记录重要和普通事件。
      default: false
      selector:
        boolean:
    camera_entities:
      name: 摄像头实体
      description: >
        选择要监控的摄像头。
        注意：摄像头的顺序要与下面的传感器顺序对应。
      selector:
        entity:
          multiple: true
          filter:
            domain: camera
    motion_sensors:
      name: 触发传感器
      description: >
        选择触发分析的传感器。
        可以是移动传感器、门窗传感器等任何二元传感器。
        注意：传感器的顺序要与上面的摄像头顺序对应。
      selector:
        entity:
          multiple: true
          filter:
            domain: binary_sensor
    notify_device:
      name: 通知设备
      description: >
        选择接收通知的设备。
        必须是已经安装了Home Assistant应用的移动设备。
        支持选择多个设备同时接收通知。
      selector:
        device:
          multiple: true
          filter:
            integration: mobile_app
    preview_mode:
      name: 预览模式
      description: >
        选择实时预览或事件快照：
        - 实时预览：显示摄像头当前画面
        - 快照：保存并显示触发时的画面
      default: '实时预览'
      selector:
        select:
          options:
            - '实时预览'
            - '快照'
    tap_navigate:
      name: 点击导航
      description: >
        点击通知时导航到的路径（例如：/lovelace/cameras）。
        留空则显示图片预览。
      default: "/lovelace/cameras"
      selector:
        text:
          multiline: false
    message:
      name: 分析要求
      description: >
        告诉AI要关注画面中的哪些内容。
        可以包含多个关注点，建议使用分点列举的方式说明。
        例如关注人物、行为、穿着、可疑行为等。
      default: "请分析画面中发生了什么，重点关注：
        1. 是否有人
        2. 在做什么动作
        3. 穿着特征
        4. 是否有可疑行为
        5. 是否存在安全隐患"
      selector:
        text:
          multiline: true
    model:
      name: AI模型
      description: >
        选择用于分析的智谱AI模型：
        - glm-4v-flash：快速分析，适合简单场景
        - glm-4v-plus：详细分析，适合复杂场景
      default: "glm-4v-flash"
      selector:
        select:
          options:
            - "glm-4v-flash"
            - "glm-4v-plus"
    cooldown:
      name: 冷却时间
      description: >
        两次分析之间的最小间隔时间（分钟）。
        防止频繁触发导致分析次数过多。
        建议根据场景设置合适的间隔。
      default: 1
      selector:
        number:
          min: 0
          max: 60
          unit_of_measurement: 分钟

variables:
  notify_devices: !input notify_device
  device_name_map: >
    {% set ns = namespace(device_names=[]) %}
    {% for device_id in notify_devices %}
      {% set device_name = device_attr(device_id, "name")|lower|replace(" ", "_") %}
      {% set ns.device_names = ns.device_names + [device_name] %}
    {% endfor %}
    {{ ns.device_names }}
  camera_entity: >
    {% if trigger.entity_id in motion_sensors %}
      {% set index = motion_sensors.index(trigger.entity_id) %}
      {{ camera_entities[index] if index < camera_entities|length else camera_entities[0] }}
    {% endif %}
  camera_name: >
    {{ camera_entity.replace("camera.", "").replace("_", " ")|title }}
  sensor_name: >
    {{ trigger.entity_id.replace("binary_sensor.", "").replace("_", " ")|title }}
  image: >
    {% if preview_mode == '实时预览' %}
      {{ '/api/camera_proxy/' + camera_entity }}
    {% else %}
      {% set camera = camera_entity|default('') %}
      {% if camera %}
        /local/zhipuai/{{camera.replace("camera.", "")}}_0.jpg
      {% else %}
        ''
      {% endif %}
    {% endif %}
  notification_id: >
    {{ camera_entity + "_" + now().strftime("%Y%m%d_%H%M%S") }}
  importance_prompt: >
    您的任务是根据监控画面对安防事件进行分类。选项："passive"表示事件不重要，"time-sensitive"表示重要，"critical"表示可疑事件。
    仅在可能发生入室盗窃等类似事件时使用"critical"。"time-sensitive"可能是快递员在门口或类似重要性的事件。
    请严格使用这些回复。

mode: single
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input motion_sensors
    to: "on"
    for: 
      seconds: 1

condition:
  - condition: template
    value_template: >
      {{ trigger.entity_id in motion_sensors }}
  - condition: template
    value_template: >
      {{ camera_entity is defined and camera_entity != '' }}
  - condition: state
    entity_id: "{{ camera_entity }}"
    state: "on"

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ important }}"
        sequence:
          - action: zhipuai.image_analyzer
            data:
              model: !input model
              message: "{{importance_prompt}}"
              image_entity: "{{camera_entity}}"
            response_variable: importance

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ importance is defined and importance.response_text|lower == 'passive' }}"
        sequence:
          - stop: "事件不重要"

  - alias: "发送初始通知"
    repeat:
      for_each: "{{device_name_map}}"
      sequence:
        - service: notify.{{ repeat.item }}
          data:
            title: "⚡ {{ sensor_name }} 触发"
            message: |
              📸 正在分析 {{ camera_name }} 的画面...
              ⏳ 请稍候，AI正在处理中...
            data:
              image: "{{image}}"
              entity_id: "{{camera_entity}}"
              tag: "motion_{{notification_id}}"
              importance: high
              channel: motion
              alert_once: true
              url: !input tap_navigate
              clickAction: !input tap_navigate

  - alias: "分析事件"
    action: zhipuai.image_analyzer
    data:
      model: !input model
      message: !input message
      image_entity: "{{camera_entity}}"
    response_variable: response

  - alias: "发送分析结果"
    repeat:
      for_each: "{{device_name_map}}"
      sequence:
        - service: notify.{{ repeat.item }}
          data:
            title: "🤖 智谱AI分析结果"
            message: |
              📍 位置：{{ camera_name }}
              🕒 时间：{{ now().strftime("%H:%M:%S") }}
              
              分析结果：
              {{ response.response_text }}
              
              💡 触发源：{{ sensor_name }}
              {% if importance is defined %}
              ⚠️ 重要性：{{ importance.response_text }}
              {% endif %}
            data:
              image: "{{image}}"
              entity_id: "{{camera_entity}}"
              tag: "motion_{{notification_id}}"
              importance: "{{ 'critical' if importance is defined and importance.response_text == 'critical' else 'high' }}"
              channel: motion
              sticky: true
              persistent: true
              url: !input tap_navigate
              clickAction: !input tap_navigate

  - delay:
      minutes: !input cooldown
